class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
     
       int lenA=nums1.size();
       int lenB=nums2.size();
        int i,j;
       
        if(lenA>lenB)
        {
          vector<int> temp;
            temp=nums1;
            nums1=nums2;
            nums2=temp;

        }
     lenA=nums1.size();
     lenB=nums2.size();
      if(lenA==0) 
         return -1;
      
     int imin=0,imax=lenA;
        while(imin<=imax)    
    {
         i=(imin+imax)/2;
           j=(lenA+lenB+1)/2-i;
        if(i<lenA&&nums2[j-1]>nums1[i])
        {
            imin=i+1;
            
        }
        else if(i>0&&nums1[i-1]>nums2[j])
        {
            imax=i-1;
            
        }
        else
            break;
    }
       int max_left,min_right;
        if(i==0) max_left=nums2[j-1];
        else if(j==0) max_left=nums1[i-1];
        else max_left=max(nums1[i-1],nums2[j-1]);
        
       if((lenA+lenB)%2==1)  
       {
        
               return max_left;
           
       }
        
        
          if(i==lenA) min_right=nums2[j];
            else if(j==lenB) min_right=nums1[i];
            else min_right=min(nums1[i],nums2[j]);
            
            return (double(max_left+min_right)/2);
        
    }   
};
